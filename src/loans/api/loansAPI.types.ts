/**
 * Type of return value from acceptOffer request.
 * Describes basic information about loan which was
 * generated by acceptOffer request
 */
export interface Loan {
    /**
     * Floating point value of accepted
     * interest rate by Borrower.
     *
     * Represented in range 0 - 1,
     * ex. 0.55 is equal to 55% interest rate
     */
    acceptedInterest: number;
    /**
     * Nickname of borrower who accepted this offer
     *
     * Represented as non empty string
     */
    borrower: string;
    /**
     * Id number of created loan
     *
     * Represented as integer
     */
    id: number;
    /**
     * Precaluculated list of installments which
     * will be visible to borrower.
     * This is his future payment schedule
     *
     * Represented as {@link Installment}[]
     */
    installments: Installment[];
    /**
     * Nickname of lender who created accepted by borrower offer
     *
     * Represented as non empty string
     */
    lender: string;
    /**
     * Exact time when offer was accepted by borrower and
     * converted into loan
     *
     * Represented as integer number of seconds from 01.01.1970
     */
    startDate: string;
    /**
     * Amount of money received by borrower after acceptance
     * of offer
     *
     * Represented as floating point number if defined currency
     */
    takenAmount: number;
    /**
     * Amount of money that borrower has left to pay. It
     * took into account all interests and fees.
     *
     * Represented as floating point number if defined currency
     */
    amountLeft: number;
}

/**
 * Part of loan which must be payed by borrower to lender account.
 * Payment must be performed according to schedule.
 * Otherwise {@link fine} will increased and taken into account
 * during payment
 */
export interface Installment {
    /**
     * Unique number of installment
     *
     * Represented as integer
     */
    id: number;
    /**
     * Index of installment in schedule
     *
     * Represented as integer and starts from 0
     */
    index: number;
    /**
     * Date due to which installment must be payed by borrower.
     *
     * Represented as integer number of seconds from 01.01.1970
     */
    due: number;
    /**
     * Base amount of installment without any fees
     *
     * Represented as floating point number in defined currency
     */
    amount: number;
    /**
     * Fee which was calculated using {@link acceptedInterest}.
     * This is a cost of one installment which contains part of
     * profit for lender and transaction fee
     *
     * Represented as floating point number in defined currency
     */
    interest: number;
    /**
     * Penalty which must be payed by borrower.
     * Increases when borrower does not pay on time his installments
     *
     * Represented as floating point number in defined currency
     */
    fine: number;
    /**
     * Total amount of money which borrower will pay in given
     * installment.
     *
     * total = {@link amount} + {@link interest} + {@link fine}
     */
    total: number;
    /**
     * Amount of money left to pay by borrower
     *
     * Represented as floating point number in defined currency
     */
    left: number;
    /**
     * Current status of installment.
     *
     * Represented by string defined in {@link InstallmentStatus}
     */
    status: InstallmentStatus;
}

/**
 * Represents status of given installment
 */
export enum InstallmentStatus {
    /**
     * Shown when loan is not yet paid, but
     * current date is before deadline
     */
    PENDING = 'PENDING',
    /**
     * Shown when loan was paid by borrower
     */
    PAID = 'PAID',
    /**
     * Shown when loan is not yet paid, but
     * current date is after deadline
     */
    MISSED = 'MISSED',
}
